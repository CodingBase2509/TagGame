// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TagGame.Api.Persistence;

#nullable disable

namespace TagGame.Api.Migrations
{
    [DbContext(typeof(GamesDbContext))]
    [Migration("20250514085600_PlayerLeftInfo")]
    partial class PlayerLeftInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TagGame.Shared.DTOs.Games.PlayerLeftGameInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DisconnectType")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayLeftInfo");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.GameRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccessCode");

                    b.HasIndex("Name");

                    b.HasIndex("SettingsId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.GameSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("HideTimeout")
                        .HasColumnType("interval");

                    b.Property<bool>("IsPingEnabled")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("PingInterval")
                        .HasColumnType("interval");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<Guid>>("SeekerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Players.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarColor")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("text");

                    b.Property<Guid?>("GameRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("jsonb");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameRoomId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Players.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultAvatarColor")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("DefaultName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TagGame.Shared.DTOs.Games.PlayerLeftGameInfo", b =>
                {
                    b.HasOne("TagGame.Shared.Domain.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.GameRoom", b =>
                {
                    b.HasOne("TagGame.Shared.Domain.Games.GameSettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.GameSettings", b =>
                {
                    b.OwnsOne("TagGame.Shared.Domain.Games.GameArea", "Area", b1 =>
                        {
                            b1.Property<Guid>("GameSettingsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Boundary")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("Area_Boundary");

                            b1.Property<int>("Shape")
                                .HasColumnType("integer")
                                .HasColumnName("Area_Shape");

                            b1.HasKey("GameSettingsId");

                            b1.ToTable("Settings");

                            b1.WithOwner()
                                .HasForeignKey("GameSettingsId");
                        });

                    b.Navigation("Area")
                        .IsRequired();
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Players.Player", b =>
                {
                    b.HasOne("TagGame.Shared.Domain.Games.GameRoom", null)
                        .WithMany("Players")
                        .HasForeignKey("GameRoomId");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.GameRoom", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
