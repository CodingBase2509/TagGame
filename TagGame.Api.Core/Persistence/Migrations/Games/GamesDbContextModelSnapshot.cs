// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TagGame.Api.Core.Persistence.Contexts;

#nullable disable

namespace TagGame.Api.Core.Persistence.Migrations.Games
{
    [DbContext(typeof(GamesDbContext))]
    partial class GamesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("games")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TagGame.Shared.Domain.Games.GameRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccessCode")
                        .IsUnique();

                    b.HasIndex("OwnerUserId");

                    b.ToTable("game_rooms", "games");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentRoundNo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("matches", "games");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.RoomMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PermissionsMask")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId", "RoomId")
                        .IsUnique();

                    b.ToTable("room_memberships", "games");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<int>("Phase")
                        .HasColumnType("integer");

                    b.Property<int>("RoundNo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "RoundNo")
                        .IsUnique();

                    b.ToTable("rounds", "games");
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.GameRoom", b =>
                {
                    b.OwnsOne("TagGame.Shared.Domain.Games.Geo.GeoPolygon", "Boundaries", b1 =>
                        {
                            b1.Property<Guid>("GameRoomId")
                                .HasColumnType("uuid");

                            b1.HasKey("GameRoomId");

                            b1.ToTable("game_rooms", "games");

                            b1.ToJson("Boundaries");

                            b1.WithOwner()
                                .HasForeignKey("GameRoomId");

                            b1.OwnsMany("TagGame.Shared.Domain.Games.Geo.GeoPoint", "Points", b2 =>
                                {
                                    b2.Property<Guid>("GeoPolygonGameRoomId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision");

                                    b2.HasKey("GeoPolygonGameRoomId", "__synthesizedOrdinal");

                                    b2.ToTable("game_rooms", "games");

                                    b2.WithOwner()
                                        .HasForeignKey("GeoPolygonGameRoomId");
                                });

                            b1.Navigation("Points");
                        });

                    b.OwnsOne("TagGame.Shared.Domain.Games.RoomSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("GameRoomId")
                                .HasColumnType("uuid");

                            b1.Property<int>("HideTimeSec")
                                .HasColumnType("integer");

                            b1.Property<int>("HuntTimeSec")
                                .HasColumnType("integer");

                            b1.Property<double>("TagRadiusM")
                                .HasColumnType("double precision");

                            b1.HasKey("GameRoomId");

                            b1.ToTable("game_rooms", "games");

                            b1.ToJson("Settings");

                            b1.WithOwner()
                                .HasForeignKey("GameRoomId");
                        });

                    b.Navigation("Boundaries");

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.Match", b =>
                {
                    b.HasOne("TagGame.Shared.Domain.Games.GameRoom", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.RoomMembership", b =>
                {
                    b.HasOne("TagGame.Shared.Domain.Games.GameRoom", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagGame.Shared.Domain.Games.Round", b =>
                {
                    b.HasOne("TagGame.Shared.Domain.Games.Match", null)
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
